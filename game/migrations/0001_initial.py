# Generated by Django 5.0.2 on 2024-09-11 18:02

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('message', models.TextField()),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=800)),
                ('answer', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='footer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instagram', models.TextField(validators=[django.core.validators.URLValidator()])),
                ('twitter', models.TextField(validators=[django.core.validators.URLValidator()])),
                ('youtube', models.TextField(validators=[django.core.validators.URLValidator()])),
                ('whatsapp', models.TextField(validators=[django.core.validators.URLValidator()])),
                ('facebook', models.TextField(validators=[django.core.validators.URLValidator()])),
            ],
        ),
        migrations.CreateModel(
            name='NewsletterSubscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('subscribed_on', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('logo', models.ImageField(upload_to='partners/')),
                ('link', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Turnaments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('game_image', models.ImageField(upload_to='turnaments/')),
                ('banner_image', models.ImageField(upload_to='turnaments/')),
                ('prize_pool', models.IntegerField()),
                ('prize_1', models.IntegerField()),
                ('prize_2', models.IntegerField()),
                ('prize_3', models.IntegerField()),
                ('game_overview', models.TextField()),
                ('game_format', models.TextField()),
                ('game_rules', models.TextField()),
                ('matchmaking', models.TextField()),
                ('reamaining_seats', models.IntegerField()),
                ('reserved_seats', models.IntegerField()),
                ('total_seats', models.IntegerField()),
                ('entry_fee', models.CharField(max_length=5)),
                ('datetime', models.DateTimeField()),
                ('link', models.URLField(blank=True, null=True)),
                ('youtube', models.URLField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('fullname', models.CharField(max_length=255, verbose_name='Full Name')),
                ('mobile', models.CharField(max_length=15, unique=True, verbose_name='Mobile Number')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='City')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_name_with_date', models.CharField(max_length=500)),
                ('first_prize', models.CharField(max_length=50)),
                ('second_prize', models.CharField(max_length=50)),
                ('third_prize', models.CharField(max_length=50)),
                ('first_place', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='first_place', to=settings.AUTH_USER_MODEL, verbose_name='1st Place')),
                ('second_place', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='second_place', to=settings.AUTH_USER_MODEL, verbose_name='2nd Place')),
                ('third_place', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='third_place', to=settings.AUTH_USER_MODEL, verbose_name='3rd Place')),
            ],
        ),
    ]
